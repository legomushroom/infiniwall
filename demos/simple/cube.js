// Generated by CoffeeScript 1.6.2
(function() {
  var Cube,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Cube = (function() {
    function Cube(o) {
      this.o = o != null ? o : {};
      this.el = typeof this.o.el === 'string' ? this.$(this.o.el) : this.o.el;
      this.vars();
      this.listenToEvents();
    }

    Cube.prototype.vars = function() {
      this.vendor = this.prefix();
      this.cubeDeltaX = 0;
      this.cubeDeltaY = 0;
      this.transform = this.vendorPrefix('transform');
      this.hasTouch = __indexOf.call(window, 'ontouchstart') >= 0;
      this.startEv = this.hasTouch ? 'touchstart' : 'mousedown';
      this.moveEv = this.hasTouch ? 'touchmove' : 'mousemove';
      this.endEv = this.hasTouch ? 'touchend' : 'mouseup';
      return this.cancelEv = this.hasTouch ? 'touchcancel' : 'mouseup';
    };

    Cube.prototype.listenToEvents = function() {
      this.on(this.startEv, this.el);
      this.on(this.moveEv, document);
      this.on(this.endEv, document);
      return this.on(this.cancelEv, document);
    };

    Cube.prototype.$ = function(selector) {
      return document.querySelector(selector);
    };

    Cube.prototype.on = function(type, el, bubble) {
      return el.addEventListener(type, this, !!bubble);
    };

    Cube.prototype.off = function(type, el, bubble) {
      return el.removeEventListener(type, this, !!bubble);
    };

    Cube.prototype.vendorPrefix = function(style) {
      return this.vendor + style;
    };

    Cube.prototype.prefix = function() {
      var dom, pre, styles;

      styles = window.getComputedStyle(document.documentElement, "");
      pre = (Array.prototype.slice.call(styles).join("").match(/-(moz|webkit|ms)-/) || (styles.OLink === "" && ["", "o"]))[1];
      dom = "WebKit|Moz|MS|O".match(new RegExp("(" + pre + ")", "i"))[1];
      return "-" + pre + "-";
    };

    Cube.prototype.startHandler = function(e) {
      var point;

      this.isTouch = true;
      point = this.hasTouch ? e.touches[0] : e;
      this.startX = point.pageX;
      return this.startY = point.pageY;
    };

    Cube.prototype.endHandler = function() {
      this.isTouch = false;
      if (this.deltaX) {
        this.cubeDeltaX += this.deltaX;
      }
      if (this.deltaY) {
        return this.cubeDeltaY += this.deltaY;
      }
    };

    Cube.prototype.moveHandler = function(e) {
      var point, _ref;

      if (!this.isTouch || (!e.metaKey || !((_ref = e.touches) != null ? _ref.length : void 0) === 2)) {
        return;
      }
      point = this.hasTouch ? e.touches[0] : e;
      this.deltaX = point.pageX - this.startX;
      this.deltaY = point.pageY - this.startY;
      this.deltaY = -this.deltaY;
      return this.el.style[this.transform] = "rotateX(" + (this.cubeDeltaY + this.deltaY) + "deg) rotateY(" + (this.cubeDeltaX + this.deltaX) + "deg)";
    };

    Cube.prototype.handleEvent = function(e) {
      switch (e.type) {
        case this.startEv:
          if (!this.hasTouch && e.button !== 0) {
            return;
          }
          return this.startHandler(e);
        case this.moveEv:
          return this.moveHandler(e);
        case this.cancelEv:
        case this.endEv:
          return this.endHandler(e);
      }
    };

    return Cube;

  })();

  window.Cube = Cube;

}).call(this);
